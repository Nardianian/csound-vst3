/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== README.md ==================
static const unsigned char temp_binary_data_2[] =
"# CsoundVST3\n"
"## By Michael Gogins\n"
"## https://michaelgogins.tumblr.com\n"
"\n"
"All music and examples herein are licensed under the Creative Commons \n"
"Attribution-NonCommercial-ShareAlike 4.0 International License at \n"
"http://creativecommons.org/licenses/by-nc-sa/4.0/.\n"
"\n"
"All code herein is licensed under the GNU Affero General Public License, \n"
"version 3 at https://www.gnu.org/licenses/agpl-3.0.html.\n"
"    \n"
"Note that Cabbage (https://github.com/rorywalsh/cabbage) provides a much more \n"
"full-featured VST3 plugin version of Csound. However, CsoundVST3 enables \n"
"editing .csd text directly within DAW projects. In some cases, this can \n"
"greatly simplify and speed up the user's workflow.\n"
"\n"
"## Introduction\n"
"\n"
"CsoundVS3 enables the Csound audio programming language (https://csound.com/) \n"
"to be used within digital audio workstations as a VST3 plugin instrument and \n"
"signal processing effect.\n"
"\n"
"CsoundVST3 has audio inputs, audio outputs, MIDI inputs, and MIDI outputs. \n"
"The plugin hosts one .csd file, which can be edited from the plugin's user \n"
"interface. The interface also displays Csound's runtime messages. Csound's \n"
"score time is synchronized with the DAW's playback time, which can loop.\n"
"\n"
"CsoundVST3 has _all_ the power of command-line Csound. CsoundVST3 can read and \n"
"write on the user's filesystem, load plugin opcodes, and execute system \n"
"commands.\n"
"\n"
"CsoundVST3's GUI does _not_ provide user-defined widgets for controlling the \n"
"Csound orchestra. However, such controls can be implemented in the DAW using \n"
"MIDI control change messages.\n"
"\n"
"Please log any bug reports or feature requests as a GitHub issue.\n"
"\n"
"## Installation\n"
"\n"
"Download the installation archive from https://github.com/gogins/csound-vst3 \n"
"and unzip it.\n"
"\n"
"Copy the CsoundVST3.vst3 directory and its contents to your user VST3 plugins \n"
"directory. For example, in macOS, that would normally end up as \n"
"~/Library/Audio/Plug-Ins/VST3/CsoundVST3.vst3.\n"
"\n"
"## Usage\n"
"\n"
" 1. Write a Csound .csd file that optionally outputs stereo audio, optionally \n"
"    accepts stereo audio input, optionally accepts MIDI channel messages, and \n"
"    optionally sends out MIDI channel messages. The `<CsOptions>` element \n"
"    can map MIDI channel message fields to your Csound instrument pfields, \n"
"    and should open MIDI inputs and, if needed, MIDI outputs, for example:\n"
"    \n"
"    -MN -QN --midi-key=4 --midi-velocity=5 -m163 -+msg_color=0 --daemon  \n"
"    \n"
"    Note that \"-MN\" must used for MIDI input in a DAW, and that \"-QN\" must be \n"
"    used for MIDI output to the DAW. For standalone use, the actual device \n"
"    number must be used in place of \"N\". CsoundVST3 prints a list of available \n"
"    MIDI devices when it compiles the .csd.\n"
"    \n"
"    The \"--daemon\" option ensures that the Csound orchestra will run \n"
"    indefinitely within the DAW project.\n"
"\n"
"    Your Csound instrument definitions may use mapped pfields and/or Csound's \n"
"    MIDI input and output opcodes but, in any case, you must use a releasing \n"
"    envelope. It is possible, but tricky, to use the same instrument \n"
"    definitions for both MIDI performance and score-driven performance; but \n"
"    in that case, you must not change the value of p3 to extend note durations, \n"
"    rather, use the \"xtratim\" opcode for that purpose. Both when a Csound \n"
"    score event with a positive p3 ends, and when a MIDI note with a negative \n"
"    p3 receives its MIDI note off message, the releasing envelope will be \n"
"    triggered and will properly end the note.\n"
"\n"
"    You should ensure that your Csound orchestra outputs audio samples within \n"
"    the interval [-1, +1]. This can be controlled by adjusting `0dbfs` in your \n"
"    orchestra header.\n"
"\n"
"    The CsoundVST3.csd example contains numerous instrument definitions \n"
"    that work this way.\n"
"\n"
" 2. In your DAW, create a new track using CsoundVST3 as a virtual instrument.\n"
"\n"
" 3. Open the CsoundVST3 GUI and either open your .csd file using the\n"
"    \"Open...\" dialog, or paste the .csd code into the edit window.\n"
"\n"
" 4. In some DAWs, configure the plugin not to forward any key events to the \n"
"    host. In Reaper, open the FX editor, select the \"FX\" menu, and \n"
"    enable the \"Send all keyboard input to plug-in...\" item.\n"
" \n"
" 5. Click on the **_Play_** button to make sure that the .csd compiles and\n"
"    runs. You can use a score in your DAW, or a MIDI controller, or a\n"
"    virtual keyboard to play notes using the .csd.\n"
"\n"
" 7. Save your DAW project, and re-open it to make sure that your plugin \n"
"    and its .csd have been loaded.\n"
"\n"
"CsoundVST3 does not implement presets. The entire state of the plugin is the \n"
".csd file, which is saved and loaded as part of the DAW project. However, you \n"
"can have as many CsoundVST3 plugins on as many tracks as you like, each with \n"
"its own independent .csd file. \n"
"\n"
"If you need something like presets, you can map MIDI controllers to Csound \n"
"control variables in your csd, and then you can save the state of your MIDI \n"
"controllers in your DAW project.\n"
"\n"
"## Release notes for version 1.0beta\n"
"\n"
"This is the initial release.\n"
"\n"
"\n"
"\n"
"\n";

const char* README_md = (const char*) temp_binary_data_2;
}
